<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wkclz.demo.dao.DemoTypesMapper">
  <resultMap id="BaseResultMap" type="com.wkclz.demo.pojo.entity.DemoTypes">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="type_int" jdbcType="INTEGER" property="typeInt" />
    <result column="type_bigint" jdbcType="BIGINT" property="typeBigint" />
    <result column="type_bit" jdbcType="BIT" property="typeBit" />
    <result column="type_char" jdbcType="CHAR" property="typeChar" />
    <result column="type_date" jdbcType="DATE" property="typeDate" />
    <result column="type_datetime" jdbcType="TIMESTAMP" property="typeDatetime" />
    <result column="type_decimal" jdbcType="DECIMAL" property="typeDecimal" />
    <result column="type_double" jdbcType="DOUBLE" property="typeDouble" />
    <result column="type_float" jdbcType="REAL" property="typeFloat" />
    <result column="type_integer" jdbcType="INTEGER" property="typeInteger" />
    <result column="type_mediumint" jdbcType="INTEGER" property="typeMediumint" />
    <result column="type_numeric" jdbcType="DECIMAL" property="typeNumeric" />
    <result column="type_real" jdbcType="DOUBLE" property="typeReal" />
    <result column="type_time" jdbcType="TIME" property="typeTime" />
    <result column="type_timestamp" jdbcType="TIMESTAMP" property="typeTimestamp" />
    <result column="type_tinyint" jdbcType="TINYINT" property="typeTinyint" />
    <result column="type_tinytext" jdbcType="VARCHAR" property="typeTinytext" />
    <result column="type_varchar" jdbcType="VARCHAR" property="typeVarchar" />
    <result column="type_year" jdbcType="DATE" property="typeYear" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_by" jdbcType="BIGINT" property="updateBy" />
    <result column="comments" jdbcType="VARCHAR" property="comments" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.wkclz.demo.pojo.entity.DemoTypes">
    <result column="type_binary" jdbcType="BINARY" property="typeBinary" />
    <result column="type_blob" jdbcType="LONGVARBINARY" property="typeBlob" />
    <result column="type_geometry" jdbcType="BINARY" property="typeGeometry" />
    <result column="type_geometrycollection" jdbcType="BINARY" property="typeGeometrycollection" />
    <result column="type_json" jdbcType="LONGVARCHAR" property="typeJson" />
    <result column="type_linestring" jdbcType="BINARY" property="typeLinestring" />
    <result column="type_longblob" jdbcType="LONGVARBINARY" property="typeLongblob" />
    <result column="type_longtext" jdbcType="LONGVARCHAR" property="typeLongtext" />
    <result column="type_mediumblob" jdbcType="LONGVARBINARY" property="typeMediumblob" />
    <result column="type_mediumtext" jdbcType="LONGVARCHAR" property="typeMediumtext" />
    <result column="type_multilinestring" jdbcType="BINARY" property="typeMultilinestring" />
    <result column="type_multipoint" jdbcType="BINARY" property="typeMultipoint" />
    <result column="type_multipolygon" jdbcType="BINARY" property="typeMultipolygon" />
    <result column="type_point" jdbcType="BINARY" property="typePoint" />
    <result column="type_polygon" jdbcType="BINARY" property="typePolygon" />
    <result column="type_text" jdbcType="LONGVARCHAR" property="typeText" />
    <result column="type_tinyblob" jdbcType="VARBINARY" property="typeTinyblob" />
    <result column="type_varbinary" jdbcType="VARBINARY" property="typeVarbinary" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, type_int, type_bigint, type_bit, type_char, type_date, type_datetime, type_decimal, 
    type_double, type_float, type_integer, type_mediumint, type_numeric, type_real, type_time, 
    type_timestamp, type_tinyint, type_tinytext, type_varchar, type_year, sort, create_time, 
    create_by, update_time, update_by, comments, version, status
  </sql>
  <sql id="Blob_Column_List">
    type_binary, type_blob, type_geometry, type_geometrycollection, type_json, type_linestring, 
    type_longblob, type_longtext, type_mediumblob, type_mediumtext, type_multilinestring, 
    type_multipoint, type_multipolygon, type_point, type_polygon, type_text, type_tinyblob, 
    type_varbinary
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.wkclz.demo.pojo.entity.DemoTypesExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from demo_types
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.wkclz.demo.pojo.entity.DemoTypesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from demo_types
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from demo_types
    where id = #{id,jdbcType=BIGINT}
  </select>
  <insert id="insert" parameterType="com.wkclz.demo.pojo.entity.DemoTypes">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into demo_types (type_int, type_bigint, type_bit, 
      type_char, type_date, type_datetime, 
      type_decimal, type_double, type_float, 
      type_integer, type_mediumint, type_numeric, 
      type_real, type_time, type_timestamp, 
      type_tinyint, type_tinytext, type_varchar, 
      type_year, sort, create_time, 
      create_by, update_time, update_by, 
      comments, version, status, 
      type_binary, type_blob, type_geometry, 
      type_geometrycollection, type_json, type_linestring, 
      type_longblob, type_longtext, type_mediumblob, 
      type_mediumtext, type_multilinestring, 
      type_multipoint, type_multipolygon, type_point, 
      type_polygon, type_text, type_tinyblob, 
      type_varbinary)
    values (#{typeInt,jdbcType=INTEGER}, #{typeBigint,jdbcType=BIGINT}, #{typeBit,jdbcType=BIT}, 
      #{typeChar,jdbcType=CHAR}, #{typeDate,jdbcType=DATE}, #{typeDatetime,jdbcType=TIMESTAMP}, 
      #{typeDecimal,jdbcType=DECIMAL}, #{typeDouble,jdbcType=DOUBLE}, #{typeFloat,jdbcType=REAL}, 
      #{typeInteger,jdbcType=INTEGER}, #{typeMediumint,jdbcType=INTEGER}, #{typeNumeric,jdbcType=DECIMAL}, 
      #{typeReal,jdbcType=DOUBLE}, #{typeTime,jdbcType=TIME}, #{typeTimestamp,jdbcType=TIMESTAMP}, 
      #{typeTinyint,jdbcType=TINYINT}, #{typeTinytext,jdbcType=VARCHAR}, #{typeVarchar,jdbcType=VARCHAR}, 
      #{typeYear,jdbcType=DATE}, #{sort,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=BIGINT}, 
      #{comments,jdbcType=VARCHAR}, #{version,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{typeBinary,jdbcType=BINARY}, #{typeBlob,jdbcType=LONGVARBINARY}, #{typeGeometry,jdbcType=BINARY}, 
      #{typeGeometrycollection,jdbcType=BINARY}, #{typeJson,jdbcType=LONGVARCHAR}, #{typeLinestring,jdbcType=BINARY}, 
      #{typeLongblob,jdbcType=LONGVARBINARY}, #{typeLongtext,jdbcType=LONGVARCHAR}, #{typeMediumblob,jdbcType=LONGVARBINARY}, 
      #{typeMediumtext,jdbcType=LONGVARCHAR}, #{typeMultilinestring,jdbcType=BINARY}, 
      #{typeMultipoint,jdbcType=BINARY}, #{typeMultipolygon,jdbcType=BINARY}, #{typePoint,jdbcType=BINARY}, 
      #{typePolygon,jdbcType=BINARY}, #{typeText,jdbcType=LONGVARCHAR}, #{typeTinyblob,jdbcType=VARBINARY}, 
      #{typeVarbinary,jdbcType=VARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="com.wkclz.demo.pojo.entity.DemoTypes">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into demo_types
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="typeInt != null">
        type_int,
      </if>
      <if test="typeBigint != null">
        type_bigint,
      </if>
      <if test="typeBit != null">
        type_bit,
      </if>
      <if test="typeChar != null">
        type_char,
      </if>
      <if test="typeDate != null">
        type_date,
      </if>
      <if test="typeDatetime != null">
        type_datetime,
      </if>
      <if test="typeDecimal != null">
        type_decimal,
      </if>
      <if test="typeDouble != null">
        type_double,
      </if>
      <if test="typeFloat != null">
        type_float,
      </if>
      <if test="typeInteger != null">
        type_integer,
      </if>
      <if test="typeMediumint != null">
        type_mediumint,
      </if>
      <if test="typeNumeric != null">
        type_numeric,
      </if>
      <if test="typeReal != null">
        type_real,
      </if>
      <if test="typeTime != null">
        type_time,
      </if>
      <if test="typeTimestamp != null">
        type_timestamp,
      </if>
      <if test="typeTinyint != null">
        type_tinyint,
      </if>
      <if test="typeTinytext != null">
        type_tinytext,
      </if>
      <if test="typeVarchar != null">
        type_varchar,
      </if>
      <if test="typeYear != null">
        type_year,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="comments != null">
        comments,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="typeBinary != null">
        type_binary,
      </if>
      <if test="typeBlob != null">
        type_blob,
      </if>
      <if test="typeGeometry != null">
        type_geometry,
      </if>
      <if test="typeGeometrycollection != null">
        type_geometrycollection,
      </if>
      <if test="typeJson != null">
        type_json,
      </if>
      <if test="typeLinestring != null">
        type_linestring,
      </if>
      <if test="typeLongblob != null">
        type_longblob,
      </if>
      <if test="typeLongtext != null">
        type_longtext,
      </if>
      <if test="typeMediumblob != null">
        type_mediumblob,
      </if>
      <if test="typeMediumtext != null">
        type_mediumtext,
      </if>
      <if test="typeMultilinestring != null">
        type_multilinestring,
      </if>
      <if test="typeMultipoint != null">
        type_multipoint,
      </if>
      <if test="typeMultipolygon != null">
        type_multipolygon,
      </if>
      <if test="typePoint != null">
        type_point,
      </if>
      <if test="typePolygon != null">
        type_polygon,
      </if>
      <if test="typeText != null">
        type_text,
      </if>
      <if test="typeTinyblob != null">
        type_tinyblob,
      </if>
      <if test="typeVarbinary != null">
        type_varbinary,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="typeInt != null">
        #{typeInt,jdbcType=INTEGER},
      </if>
      <if test="typeBigint != null">
        #{typeBigint,jdbcType=BIGINT},
      </if>
      <if test="typeBit != null">
        #{typeBit,jdbcType=BIT},
      </if>
      <if test="typeChar != null">
        #{typeChar,jdbcType=CHAR},
      </if>
      <if test="typeDate != null">
        #{typeDate,jdbcType=DATE},
      </if>
      <if test="typeDatetime != null">
        #{typeDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="typeDecimal != null">
        #{typeDecimal,jdbcType=DECIMAL},
      </if>
      <if test="typeDouble != null">
        #{typeDouble,jdbcType=DOUBLE},
      </if>
      <if test="typeFloat != null">
        #{typeFloat,jdbcType=REAL},
      </if>
      <if test="typeInteger != null">
        #{typeInteger,jdbcType=INTEGER},
      </if>
      <if test="typeMediumint != null">
        #{typeMediumint,jdbcType=INTEGER},
      </if>
      <if test="typeNumeric != null">
        #{typeNumeric,jdbcType=DECIMAL},
      </if>
      <if test="typeReal != null">
        #{typeReal,jdbcType=DOUBLE},
      </if>
      <if test="typeTime != null">
        #{typeTime,jdbcType=TIME},
      </if>
      <if test="typeTimestamp != null">
        #{typeTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="typeTinyint != null">
        #{typeTinyint,jdbcType=TINYINT},
      </if>
      <if test="typeTinytext != null">
        #{typeTinytext,jdbcType=VARCHAR},
      </if>
      <if test="typeVarchar != null">
        #{typeVarchar,jdbcType=VARCHAR},
      </if>
      <if test="typeYear != null">
        #{typeYear,jdbcType=DATE},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=BIGINT},
      </if>
      <if test="comments != null">
        #{comments,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="typeBinary != null">
        #{typeBinary,jdbcType=BINARY},
      </if>
      <if test="typeBlob != null">
        #{typeBlob,jdbcType=LONGVARBINARY},
      </if>
      <if test="typeGeometry != null">
        #{typeGeometry,jdbcType=BINARY},
      </if>
      <if test="typeGeometrycollection != null">
        #{typeGeometrycollection,jdbcType=BINARY},
      </if>
      <if test="typeJson != null">
        #{typeJson,jdbcType=LONGVARCHAR},
      </if>
      <if test="typeLinestring != null">
        #{typeLinestring,jdbcType=BINARY},
      </if>
      <if test="typeLongblob != null">
        #{typeLongblob,jdbcType=LONGVARBINARY},
      </if>
      <if test="typeLongtext != null">
        #{typeLongtext,jdbcType=LONGVARCHAR},
      </if>
      <if test="typeMediumblob != null">
        #{typeMediumblob,jdbcType=LONGVARBINARY},
      </if>
      <if test="typeMediumtext != null">
        #{typeMediumtext,jdbcType=LONGVARCHAR},
      </if>
      <if test="typeMultilinestring != null">
        #{typeMultilinestring,jdbcType=BINARY},
      </if>
      <if test="typeMultipoint != null">
        #{typeMultipoint,jdbcType=BINARY},
      </if>
      <if test="typeMultipolygon != null">
        #{typeMultipolygon,jdbcType=BINARY},
      </if>
      <if test="typePoint != null">
        #{typePoint,jdbcType=BINARY},
      </if>
      <if test="typePolygon != null">
        #{typePolygon,jdbcType=BINARY},
      </if>
      <if test="typeText != null">
        #{typeText,jdbcType=LONGVARCHAR},
      </if>
      <if test="typeTinyblob != null">
        #{typeTinyblob,jdbcType=VARBINARY},
      </if>
      <if test="typeVarbinary != null">
        #{typeVarbinary,jdbcType=VARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.wkclz.demo.pojo.entity.DemoTypesExample" resultType="java.lang.Long">
    select count(*) from demo_types
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update demo_types
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.typeInt != null">
        type_int = #{record.typeInt,jdbcType=INTEGER},
      </if>
      <if test="record.typeBigint != null">
        type_bigint = #{record.typeBigint,jdbcType=BIGINT},
      </if>
      <if test="record.typeBit != null">
        type_bit = #{record.typeBit,jdbcType=BIT},
      </if>
      <if test="record.typeChar != null">
        type_char = #{record.typeChar,jdbcType=CHAR},
      </if>
      <if test="record.typeDate != null">
        type_date = #{record.typeDate,jdbcType=DATE},
      </if>
      <if test="record.typeDatetime != null">
        type_datetime = #{record.typeDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.typeDecimal != null">
        type_decimal = #{record.typeDecimal,jdbcType=DECIMAL},
      </if>
      <if test="record.typeDouble != null">
        type_double = #{record.typeDouble,jdbcType=DOUBLE},
      </if>
      <if test="record.typeFloat != null">
        type_float = #{record.typeFloat,jdbcType=REAL},
      </if>
      <if test="record.typeInteger != null">
        type_integer = #{record.typeInteger,jdbcType=INTEGER},
      </if>
      <if test="record.typeMediumint != null">
        type_mediumint = #{record.typeMediumint,jdbcType=INTEGER},
      </if>
      <if test="record.typeNumeric != null">
        type_numeric = #{record.typeNumeric,jdbcType=DECIMAL},
      </if>
      <if test="record.typeReal != null">
        type_real = #{record.typeReal,jdbcType=DOUBLE},
      </if>
      <if test="record.typeTime != null">
        type_time = #{record.typeTime,jdbcType=TIME},
      </if>
      <if test="record.typeTimestamp != null">
        type_timestamp = #{record.typeTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="record.typeTinyint != null">
        type_tinyint = #{record.typeTinyint,jdbcType=TINYINT},
      </if>
      <if test="record.typeTinytext != null">
        type_tinytext = #{record.typeTinytext,jdbcType=VARCHAR},
      </if>
      <if test="record.typeVarchar != null">
        type_varchar = #{record.typeVarchar,jdbcType=VARCHAR},
      </if>
      <if test="record.typeYear != null">
        type_year = #{record.typeYear,jdbcType=DATE},
      </if>
      <if test="record.sort != null">
        sort = #{record.sort,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=BIGINT},
      </if>
      <if test="record.comments != null">
        comments = #{record.comments,jdbcType=VARCHAR},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.typeBinary != null">
        type_binary = #{record.typeBinary,jdbcType=BINARY},
      </if>
      <if test="record.typeBlob != null">
        type_blob = #{record.typeBlob,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.typeGeometry != null">
        type_geometry = #{record.typeGeometry,jdbcType=BINARY},
      </if>
      <if test="record.typeGeometrycollection != null">
        type_geometrycollection = #{record.typeGeometrycollection,jdbcType=BINARY},
      </if>
      <if test="record.typeJson != null">
        type_json = #{record.typeJson,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.typeLinestring != null">
        type_linestring = #{record.typeLinestring,jdbcType=BINARY},
      </if>
      <if test="record.typeLongblob != null">
        type_longblob = #{record.typeLongblob,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.typeLongtext != null">
        type_longtext = #{record.typeLongtext,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.typeMediumblob != null">
        type_mediumblob = #{record.typeMediumblob,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.typeMediumtext != null">
        type_mediumtext = #{record.typeMediumtext,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.typeMultilinestring != null">
        type_multilinestring = #{record.typeMultilinestring,jdbcType=BINARY},
      </if>
      <if test="record.typeMultipoint != null">
        type_multipoint = #{record.typeMultipoint,jdbcType=BINARY},
      </if>
      <if test="record.typeMultipolygon != null">
        type_multipolygon = #{record.typeMultipolygon,jdbcType=BINARY},
      </if>
      <if test="record.typePoint != null">
        type_point = #{record.typePoint,jdbcType=BINARY},
      </if>
      <if test="record.typePolygon != null">
        type_polygon = #{record.typePolygon,jdbcType=BINARY},
      </if>
      <if test="record.typeText != null">
        type_text = #{record.typeText,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.typeTinyblob != null">
        type_tinyblob = #{record.typeTinyblob,jdbcType=VARBINARY},
      </if>
      <if test="record.typeVarbinary != null">
        type_varbinary = #{record.typeVarbinary,jdbcType=VARBINARY},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update demo_types
    set id = #{record.id,jdbcType=BIGINT},
      type_int = #{record.typeInt,jdbcType=INTEGER},
      type_bigint = #{record.typeBigint,jdbcType=BIGINT},
      type_bit = #{record.typeBit,jdbcType=BIT},
      type_char = #{record.typeChar,jdbcType=CHAR},
      type_date = #{record.typeDate,jdbcType=DATE},
      type_datetime = #{record.typeDatetime,jdbcType=TIMESTAMP},
      type_decimal = #{record.typeDecimal,jdbcType=DECIMAL},
      type_double = #{record.typeDouble,jdbcType=DOUBLE},
      type_float = #{record.typeFloat,jdbcType=REAL},
      type_integer = #{record.typeInteger,jdbcType=INTEGER},
      type_mediumint = #{record.typeMediumint,jdbcType=INTEGER},
      type_numeric = #{record.typeNumeric,jdbcType=DECIMAL},
      type_real = #{record.typeReal,jdbcType=DOUBLE},
      type_time = #{record.typeTime,jdbcType=TIME},
      type_timestamp = #{record.typeTimestamp,jdbcType=TIMESTAMP},
      type_tinyint = #{record.typeTinyint,jdbcType=TINYINT},
      type_tinytext = #{record.typeTinytext,jdbcType=VARCHAR},
      type_varchar = #{record.typeVarchar,jdbcType=VARCHAR},
      type_year = #{record.typeYear,jdbcType=DATE},
      sort = #{record.sort,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      comments = #{record.comments,jdbcType=VARCHAR},
      version = #{record.version,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      type_binary = #{record.typeBinary,jdbcType=BINARY},
      type_blob = #{record.typeBlob,jdbcType=LONGVARBINARY},
      type_geometry = #{record.typeGeometry,jdbcType=BINARY},
      type_geometrycollection = #{record.typeGeometrycollection,jdbcType=BINARY},
      type_json = #{record.typeJson,jdbcType=LONGVARCHAR},
      type_linestring = #{record.typeLinestring,jdbcType=BINARY},
      type_longblob = #{record.typeLongblob,jdbcType=LONGVARBINARY},
      type_longtext = #{record.typeLongtext,jdbcType=LONGVARCHAR},
      type_mediumblob = #{record.typeMediumblob,jdbcType=LONGVARBINARY},
      type_mediumtext = #{record.typeMediumtext,jdbcType=LONGVARCHAR},
      type_multilinestring = #{record.typeMultilinestring,jdbcType=BINARY},
      type_multipoint = #{record.typeMultipoint,jdbcType=BINARY},
      type_multipolygon = #{record.typeMultipolygon,jdbcType=BINARY},
      type_point = #{record.typePoint,jdbcType=BINARY},
      type_polygon = #{record.typePolygon,jdbcType=BINARY},
      type_text = #{record.typeText,jdbcType=LONGVARCHAR},
      type_tinyblob = #{record.typeTinyblob,jdbcType=VARBINARY},
      type_varbinary = #{record.typeVarbinary,jdbcType=VARBINARY}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update demo_types
    set id = #{record.id,jdbcType=BIGINT},
      type_int = #{record.typeInt,jdbcType=INTEGER},
      type_bigint = #{record.typeBigint,jdbcType=BIGINT},
      type_bit = #{record.typeBit,jdbcType=BIT},
      type_char = #{record.typeChar,jdbcType=CHAR},
      type_date = #{record.typeDate,jdbcType=DATE},
      type_datetime = #{record.typeDatetime,jdbcType=TIMESTAMP},
      type_decimal = #{record.typeDecimal,jdbcType=DECIMAL},
      type_double = #{record.typeDouble,jdbcType=DOUBLE},
      type_float = #{record.typeFloat,jdbcType=REAL},
      type_integer = #{record.typeInteger,jdbcType=INTEGER},
      type_mediumint = #{record.typeMediumint,jdbcType=INTEGER},
      type_numeric = #{record.typeNumeric,jdbcType=DECIMAL},
      type_real = #{record.typeReal,jdbcType=DOUBLE},
      type_time = #{record.typeTime,jdbcType=TIME},
      type_timestamp = #{record.typeTimestamp,jdbcType=TIMESTAMP},
      type_tinyint = #{record.typeTinyint,jdbcType=TINYINT},
      type_tinytext = #{record.typeTinytext,jdbcType=VARCHAR},
      type_varchar = #{record.typeVarchar,jdbcType=VARCHAR},
      type_year = #{record.typeYear,jdbcType=DATE},
      sort = #{record.sort,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      comments = #{record.comments,jdbcType=VARCHAR},
      version = #{record.version,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.wkclz.demo.pojo.entity.DemoTypes">
    update demo_types
    <set>
      <if test="typeInt != null">
        type_int = #{typeInt,jdbcType=INTEGER},
      </if>
      <if test="typeBigint != null">
        type_bigint = #{typeBigint,jdbcType=BIGINT},
      </if>
      <if test="typeBit != null">
        type_bit = #{typeBit,jdbcType=BIT},
      </if>
      <if test="typeChar != null">
        type_char = #{typeChar,jdbcType=CHAR},
      </if>
      <if test="typeDate != null">
        type_date = #{typeDate,jdbcType=DATE},
      </if>
      <if test="typeDatetime != null">
        type_datetime = #{typeDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="typeDecimal != null">
        type_decimal = #{typeDecimal,jdbcType=DECIMAL},
      </if>
      <if test="typeDouble != null">
        type_double = #{typeDouble,jdbcType=DOUBLE},
      </if>
      <if test="typeFloat != null">
        type_float = #{typeFloat,jdbcType=REAL},
      </if>
      <if test="typeInteger != null">
        type_integer = #{typeInteger,jdbcType=INTEGER},
      </if>
      <if test="typeMediumint != null">
        type_mediumint = #{typeMediumint,jdbcType=INTEGER},
      </if>
      <if test="typeNumeric != null">
        type_numeric = #{typeNumeric,jdbcType=DECIMAL},
      </if>
      <if test="typeReal != null">
        type_real = #{typeReal,jdbcType=DOUBLE},
      </if>
      <if test="typeTime != null">
        type_time = #{typeTime,jdbcType=TIME},
      </if>
      <if test="typeTimestamp != null">
        type_timestamp = #{typeTimestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="typeTinyint != null">
        type_tinyint = #{typeTinyint,jdbcType=TINYINT},
      </if>
      <if test="typeTinytext != null">
        type_tinytext = #{typeTinytext,jdbcType=VARCHAR},
      </if>
      <if test="typeVarchar != null">
        type_varchar = #{typeVarchar,jdbcType=VARCHAR},
      </if>
      <if test="typeYear != null">
        type_year = #{typeYear,jdbcType=DATE},
      </if>
      <if test="sort != null">
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=BIGINT},
      </if>
      <if test="comments != null">
        comments = #{comments,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="typeBinary != null">
        type_binary = #{typeBinary,jdbcType=BINARY},
      </if>
      <if test="typeBlob != null">
        type_blob = #{typeBlob,jdbcType=LONGVARBINARY},
      </if>
      <if test="typeGeometry != null">
        type_geometry = #{typeGeometry,jdbcType=BINARY},
      </if>
      <if test="typeGeometrycollection != null">
        type_geometrycollection = #{typeGeometrycollection,jdbcType=BINARY},
      </if>
      <if test="typeJson != null">
        type_json = #{typeJson,jdbcType=LONGVARCHAR},
      </if>
      <if test="typeLinestring != null">
        type_linestring = #{typeLinestring,jdbcType=BINARY},
      </if>
      <if test="typeLongblob != null">
        type_longblob = #{typeLongblob,jdbcType=LONGVARBINARY},
      </if>
      <if test="typeLongtext != null">
        type_longtext = #{typeLongtext,jdbcType=LONGVARCHAR},
      </if>
      <if test="typeMediumblob != null">
        type_mediumblob = #{typeMediumblob,jdbcType=LONGVARBINARY},
      </if>
      <if test="typeMediumtext != null">
        type_mediumtext = #{typeMediumtext,jdbcType=LONGVARCHAR},
      </if>
      <if test="typeMultilinestring != null">
        type_multilinestring = #{typeMultilinestring,jdbcType=BINARY},
      </if>
      <if test="typeMultipoint != null">
        type_multipoint = #{typeMultipoint,jdbcType=BINARY},
      </if>
      <if test="typeMultipolygon != null">
        type_multipolygon = #{typeMultipolygon,jdbcType=BINARY},
      </if>
      <if test="typePoint != null">
        type_point = #{typePoint,jdbcType=BINARY},
      </if>
      <if test="typePolygon != null">
        type_polygon = #{typePolygon,jdbcType=BINARY},
      </if>
      <if test="typeText != null">
        type_text = #{typeText,jdbcType=LONGVARCHAR},
      </if>
      <if test="typeTinyblob != null">
        type_tinyblob = #{typeTinyblob,jdbcType=VARBINARY},
      </if>
      <if test="typeVarbinary != null">
        type_varbinary = #{typeVarbinary,jdbcType=VARBINARY},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.wkclz.demo.pojo.entity.DemoTypes">
    update demo_types
    set type_int = #{typeInt,jdbcType=INTEGER},
      type_bigint = #{typeBigint,jdbcType=BIGINT},
      type_bit = #{typeBit,jdbcType=BIT},
      type_char = #{typeChar,jdbcType=CHAR},
      type_date = #{typeDate,jdbcType=DATE},
      type_datetime = #{typeDatetime,jdbcType=TIMESTAMP},
      type_decimal = #{typeDecimal,jdbcType=DECIMAL},
      type_double = #{typeDouble,jdbcType=DOUBLE},
      type_float = #{typeFloat,jdbcType=REAL},
      type_integer = #{typeInteger,jdbcType=INTEGER},
      type_mediumint = #{typeMediumint,jdbcType=INTEGER},
      type_numeric = #{typeNumeric,jdbcType=DECIMAL},
      type_real = #{typeReal,jdbcType=DOUBLE},
      type_time = #{typeTime,jdbcType=TIME},
      type_timestamp = #{typeTimestamp,jdbcType=TIMESTAMP},
      type_tinyint = #{typeTinyint,jdbcType=TINYINT},
      type_tinytext = #{typeTinytext,jdbcType=VARCHAR},
      type_varchar = #{typeVarchar,jdbcType=VARCHAR},
      type_year = #{typeYear,jdbcType=DATE},
      sort = #{sort,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=BIGINT},
      comments = #{comments,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      type_binary = #{typeBinary,jdbcType=BINARY},
      type_blob = #{typeBlob,jdbcType=LONGVARBINARY},
      type_geometry = #{typeGeometry,jdbcType=BINARY},
      type_geometrycollection = #{typeGeometrycollection,jdbcType=BINARY},
      type_json = #{typeJson,jdbcType=LONGVARCHAR},
      type_linestring = #{typeLinestring,jdbcType=BINARY},
      type_longblob = #{typeLongblob,jdbcType=LONGVARBINARY},
      type_longtext = #{typeLongtext,jdbcType=LONGVARCHAR},
      type_mediumblob = #{typeMediumblob,jdbcType=LONGVARBINARY},
      type_mediumtext = #{typeMediumtext,jdbcType=LONGVARCHAR},
      type_multilinestring = #{typeMultilinestring,jdbcType=BINARY},
      type_multipoint = #{typeMultipoint,jdbcType=BINARY},
      type_multipolygon = #{typeMultipolygon,jdbcType=BINARY},
      type_point = #{typePoint,jdbcType=BINARY},
      type_polygon = #{typePolygon,jdbcType=BINARY},
      type_text = #{typeText,jdbcType=LONGVARCHAR},
      type_tinyblob = #{typeTinyblob,jdbcType=VARBINARY},
      type_varbinary = #{typeVarbinary,jdbcType=VARBINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wkclz.demo.pojo.entity.DemoTypes">
    update demo_types
    set type_int = #{typeInt,jdbcType=INTEGER},
      type_bigint = #{typeBigint,jdbcType=BIGINT},
      type_bit = #{typeBit,jdbcType=BIT},
      type_char = #{typeChar,jdbcType=CHAR},
      type_date = #{typeDate,jdbcType=DATE},
      type_datetime = #{typeDatetime,jdbcType=TIMESTAMP},
      type_decimal = #{typeDecimal,jdbcType=DECIMAL},
      type_double = #{typeDouble,jdbcType=DOUBLE},
      type_float = #{typeFloat,jdbcType=REAL},
      type_integer = #{typeInteger,jdbcType=INTEGER},
      type_mediumint = #{typeMediumint,jdbcType=INTEGER},
      type_numeric = #{typeNumeric,jdbcType=DECIMAL},
      type_real = #{typeReal,jdbcType=DOUBLE},
      type_time = #{typeTime,jdbcType=TIME},
      type_timestamp = #{typeTimestamp,jdbcType=TIMESTAMP},
      type_tinyint = #{typeTinyint,jdbcType=TINYINT},
      type_tinytext = #{typeTinytext,jdbcType=VARCHAR},
      type_varchar = #{typeVarchar,jdbcType=VARCHAR},
      type_year = #{typeYear,jdbcType=DATE},
      sort = #{sort,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=BIGINT},
      comments = #{comments,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <insert id="insertBatch" parameterType="map">
    insert into demo_types
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="columnsMap.id != null">
        id,
      </if>
      <if test="columnsMap.typeInt != null">
        type_int,
      </if>
      <if test="columnsMap.typeBigint != null">
        type_bigint,
      </if>
      <if test="columnsMap.typeBinary != null">
        type_binary,
      </if>
      <if test="columnsMap.typeBit != null">
        type_bit,
      </if>
      <if test="columnsMap.typeBlob != null">
        type_blob,
      </if>
      <if test="columnsMap.typeChar != null">
        type_char,
      </if>
      <if test="columnsMap.typeDate != null">
        type_date,
      </if>
      <if test="columnsMap.typeDatetime != null">
        type_datetime,
      </if>
      <if test="columnsMap.typeDecimal != null">
        type_decimal,
      </if>
      <if test="columnsMap.typeDouble != null">
        type_double,
      </if>
      <if test="columnsMap.typeFloat != null">
        type_float,
      </if>
      <if test="columnsMap.typeGeometry != null">
        type_geometry,
      </if>
      <if test="columnsMap.typeGeometrycollection != null">
        type_geometrycollection,
      </if>
      <if test="columnsMap.typeInteger != null">
        type_integer,
      </if>
      <if test="columnsMap.typeJson != null">
        type_json,
      </if>
      <if test="columnsMap.typeLinestring != null">
        type_linestring,
      </if>
      <if test="columnsMap.typeLongblob != null">
        type_longblob,
      </if>
      <if test="columnsMap.typeLongtext != null">
        type_longtext,
      </if>
      <if test="columnsMap.typeMediumblob != null">
        type_mediumblob,
      </if>
      <if test="columnsMap.typeMediumint != null">
        type_mediumint,
      </if>
      <if test="columnsMap.typeMediumtext != null">
        type_mediumtext,
      </if>
      <if test="columnsMap.typeMultilinestring != null">
        type_multilinestring,
      </if>
      <if test="columnsMap.typeMultipoint != null">
        type_multipoint,
      </if>
      <if test="columnsMap.typeMultipolygon != null">
        type_multipolygon,
      </if>
      <if test="columnsMap.typeNumeric != null">
        type_numeric,
      </if>
      <if test="columnsMap.typePoint != null">
        type_point,
      </if>
      <if test="columnsMap.typePolygon != null">
        type_polygon,
      </if>
      <if test="columnsMap.typeReal != null">
        type_real,
      </if>
      <if test="columnsMap.typeText != null">
        type_text,
      </if>
      <if test="columnsMap.typeTime != null">
        type_time,
      </if>
      <if test="columnsMap.typeTimestamp != null">
        type_timestamp,
      </if>
      <if test="columnsMap.typeTinyblob != null">
        type_tinyblob,
      </if>
      <if test="columnsMap.typeTinyint != null">
        type_tinyint,
      </if>
      <if test="columnsMap.typeTinytext != null">
        type_tinytext,
      </if>
      <if test="columnsMap.typeVarbinary != null">
        type_varbinary,
      </if>
      <if test="columnsMap.typeVarchar != null">
        type_varchar,
      </if>
      <if test="columnsMap.typeYear != null">
        type_year,
      </if>
    </trim>
    values
    <foreach collection = "record" item = "item" separator = ",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <if test="columnsMap.id != null">
          #{item.id},
        </if>
        <if test="columnsMap.typeInt != null">
          #{item.typeInt},
        </if>
        <if test="columnsMap.typeBigint != null">
          #{item.typeBigint},
        </if>
        <if test="columnsMap.typeBinary != null">
          #{item.typeBinary},
        </if>
        <if test="columnsMap.typeBit != null">
          #{item.typeBit},
        </if>
        <if test="columnsMap.typeBlob != null">
          #{item.typeBlob},
        </if>
        <if test="columnsMap.typeChar != null">
          #{item.typeChar},
        </if>
        <if test="columnsMap.typeDate != null">
          #{item.typeDate},
        </if>
        <if test="columnsMap.typeDatetime != null">
          #{item.typeDatetime},
        </if>
        <if test="columnsMap.typeDecimal != null">
          #{item.typeDecimal},
        </if>
        <if test="columnsMap.typeDouble != null">
          #{item.typeDouble},
        </if>
        <if test="columnsMap.typeFloat != null">
          #{item.typeFloat},
        </if>
        <if test="columnsMap.typeGeometry != null">
          #{item.typeGeometry},
        </if>
        <if test="columnsMap.typeGeometrycollection != null">
          #{item.typeGeometrycollection},
        </if>
        <if test="columnsMap.typeInteger != null">
          #{item.typeInteger},
        </if>
        <if test="columnsMap.typeJson != null">
          #{item.typeJson},
        </if>
        <if test="columnsMap.typeLinestring != null">
          #{item.typeLinestring},
        </if>
        <if test="columnsMap.typeLongblob != null">
          #{item.typeLongblob},
        </if>
        <if test="columnsMap.typeLongtext != null">
          #{item.typeLongtext},
        </if>
        <if test="columnsMap.typeMediumblob != null">
          #{item.typeMediumblob},
        </if>
        <if test="columnsMap.typeMediumint != null">
          #{item.typeMediumint},
        </if>
        <if test="columnsMap.typeMediumtext != null">
          #{item.typeMediumtext},
        </if>
        <if test="columnsMap.typeMultilinestring != null">
          #{item.typeMultilinestring},
        </if>
        <if test="columnsMap.typeMultipoint != null">
          #{item.typeMultipoint},
        </if>
        <if test="columnsMap.typeMultipolygon != null">
          #{item.typeMultipolygon},
        </if>
        <if test="columnsMap.typeNumeric != null">
          #{item.typeNumeric},
        </if>
        <if test="columnsMap.typePoint != null">
          #{item.typePoint},
        </if>
        <if test="columnsMap.typePolygon != null">
          #{item.typePolygon},
        </if>
        <if test="columnsMap.typeReal != null">
          #{item.typeReal},
        </if>
        <if test="columnsMap.typeText != null">
          #{item.typeText},
        </if>
        <if test="columnsMap.typeTime != null">
          #{item.typeTime},
        </if>
        <if test="columnsMap.typeTimestamp != null">
          #{item.typeTimestamp},
        </if>
        <if test="columnsMap.typeTinyblob != null">
          #{item.typeTinyblob},
        </if>
        <if test="columnsMap.typeTinyint != null">
          #{item.typeTinyint},
        </if>
        <if test="columnsMap.typeTinytext != null">
          #{item.typeTinytext},
        </if>
        <if test="columnsMap.typeVarbinary != null">
          #{item.typeVarbinary},
        </if>
        <if test="columnsMap.typeVarchar != null">
          #{item.typeVarchar},
        </if>
        <if test="columnsMap.typeYear != null">
          #{item.typeYear},
        </if>
      </trim>
    </foreach>
  </insert>
</mapper>
